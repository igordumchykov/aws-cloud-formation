---
#script for deploying AWS infrastructure running on client machine

  Parameters:
    InstanceKeyPair:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: String
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    ProvisionScriptBucketName:
      Description: Name of bucket with provision scripts
      Type: String
    ProvisionScriptFileName:
      Description: Name of file with provision script
      Type: String
    ClientIPCIDR:
      Description: CIDR of client IP
      Type: String

  Resources:
      ReadS3ScripsRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "ec2.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            -
              PolicyName: "read-s3-policy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                       - "s3:Get*"
                       - "s3:List*"
                    Resource: "*"

      EC2InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
          Roles:
            - !Ref ReadS3ScripsRole

      NexusSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow all interaction
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0

            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: !Ref ClientIPCIDR

            - IpProtocol: tcp
              FromPort: 8081
              ToPort: 8081
              CidrIp: !Ref ClientIPCIDR

      EC2Instance:
        Type: AWS::EC2::Instance
        Metadata:
          AWS::CloudFormation::Init:
            config:
              files:
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                    runas=root
                  mode: "000400"
                  owner: "root"
                  group: "root"
                "/etc/cfn/cfn-hup.conf":
                  content: !Sub |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                  mode: "000400"
                  owner: "root"
                  group: "root"
              services:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
                  files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        Properties:
          InstanceType: t2.micro
          IamInstanceProfile: !Ref EC2InstanceProfile
          SecurityGroupIds:
            - !Ref NexusSecurityGroup
          KeyName: !Ref InstanceKeyPair
          ImageId: ami-0f5dbc86dd9cbf7a8
          UserData:
            Fn::Base64:
              !Sub |
                #!/bin/bash
                yum install -y aws-cfn-bootstrap
                amazon-linux-extras install ansible2 -y
                aws s3 cp s3://${ProvisionScriptBucketName} /scripts/ --recursive
                ansible-playbook /scripts/${ProvisionScriptFileName}
                /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r EC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
                /opt/aws/bin/cfn-hup || error_exit 'Failed to run cfn-hup'
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
  Outputs:
    EC2InstanceURL:
      Description: URL of created EC2 instance
      Value: !GetAtt ["EC2Instance", "PublicIp"]
