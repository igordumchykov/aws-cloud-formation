---
#script for deploying AWS infrastructure running on client machine

  Parameters:
    InstanceKeyPair:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    ProvisionScriptBucketName:
      Description: Name of bucket with provision scripts
      Type: String
    ProvisionScriptFileName:
      Description: Name of file with provision script
      Type: String
    ClientIPCIDR:
      Description: CIDR of client IP
      Type: String

  Mappings:
    VPCConfig:
      VPC:
        CIDR: 10.0.0.0/16
      Subnet1:
        CIDR: 10.0.1.0/24
        AZIndex: 0
      Subnet2:
        CIDR: 10.0.2.0/24
        AZIndex: 1
      DefaultPublicRoute:
        CIDR: 0.0.0.0/0
    EC2Config:
      Nexus:
        InstanceType: t2.micro
        ImageId: ami-0f5dbc86dd9cbf7a8
    SecurityGroupConfig:
      Nexus:
        FromPortOut: 8180
        ToPortOut: 8180

  Resources:
    ReadS3ScripsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "read-s3-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                     - "s3:Get*"
                     - "s3:List*"
                  Resource: "*"

    EC2InstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Roles:
          - !Ref ReadS3ScripsRole
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !FindInMap [VPCConfig, VPC, CIDR]
        Tags:
          - Key: EnvironmentType
            Value: Nexus

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ !FindInMap [VPCConfig, Subnet1, AZIndex], !GetAZs '' ]
        CidrBlock: !FindInMap [VPCConfig, Subnet1, CIDR]
        MapPublicIpOnLaunch: true

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ !FindInMap [VPCConfig, Subnet2, AZIndex], !GetAZs '' ]
        CidrBlock: !FindInMap [VPCConfig, Subnet2, CIDR]
        MapPublicIpOnLaunch: true

    InternetGateway:
      Type: AWS::EC2::InternetGateway

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: !FindInMap [VPCConfig, DefaultPublicRoute, CIDR]
          GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

    ELBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Firewall in front of ELB
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref ClientIPCIDR
        VpcId: !Ref VPC

    NexusSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Firewall in front of Nexus
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref ClientIPCIDR

          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ELBSecurityGroup

          - IpProtocol: tcp
            FromPort: !FindInMap [ SecurityGroupConfig, Nexus, FromPortOut ]
            ToPort: !FindInMap [ SecurityGroupConfig, Nexus, ToPortOut ]
            SourceSecurityGroupId: !Ref ELBSecurityGroup
        VpcId: !Ref VPC

    WebServerGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        # AvailabilityZones: !GetAZs ''
        LaunchConfigurationName: !Ref LaunchConfig
        MinSize: 2
        MaxSize: 3
        LoadBalancerNames:
          - !Ref ElasticLoadBalancer
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
      CreationPolicy:
        ResourceSignal:
          Timeout: PT5M
          # Count: 1
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 1
          MaxBatchSize: 1
          PauseTime: PT5M
          WaitOnResourceSignals: true

    LaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
                  runas=root
                mode: "000400"
                owner: "root"
                group: "root"
              "/etc/cfn/cfn-hup.conf":
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                mode: "000400"
                owner: "root"
                group: "root"
            services:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
      Properties:
        InstanceType: !FindInMap [ EC2Config, Nexus, InstanceType ]
        IamInstanceProfile: !Ref EC2InstanceProfile
        SecurityGroups:
          - !Ref NexusSecurityGroup
        KeyName: !Ref InstanceKeyPair
        ImageId: !FindInMap [ EC2Config, Nexus, ImageId ]
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum install -y aws-cfn-bootstrap
              amazon-linux-extras install ansible2 -y
              aws s3 cp s3://${ProvisionScriptBucketName}/${ProvisionScriptFileName} ./provision.yaml
              ansible-playbook provision.yaml
              /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r LaunchConfig --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
              /opt/aws/bin/cfn-hup || error_exit 'Failed to run cfn-hup'
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}

    WebServerScaleUpPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref WebServerGroup
        Cooldown: '60'
        ScalingAdjustment: 1
    WebServerScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref WebServerGroup
        Cooldown: '60'
        ScalingAdjustment: -1
    CPUAlarmHigh:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Scale-up if CPU > 90% for 1 minute
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 60
        EvaluationPeriods: 1
        Threshold: 90
        AlarmActions:
          - !Ref WebServerScaleUpPolicy
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref WebServerGroup
        ComparisonOperator: GreaterThanThreshold
    CPUAlarmLow:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Scale-down if CPU < 90% for 1 minute
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 60
        EvaluationPeriods: 1
        Threshold: 90
        AlarmActions:
          - !Ref WebServerScaleDownPolicy
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref WebServerGroup
        ComparisonOperator: LessThanThreshold

    ElasticLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
        CrossZone: true
        SecurityGroups:
          - !Ref ELBSecurityGroup
        Listeners:
          - LoadBalancerPort: 80
            InstancePort: 80
            Protocol: HTTP
        HealthCheck:
          Target: HTTP:80/index.html
          HealthyThreshold: 3
          UnhealthyThreshold: 2
          Interval: 5
          Timeout: 3
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
